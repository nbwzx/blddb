const tracer = (function () {
  const edgeChDefault = "GHABCDEFOPKLQRSTYZIJWXMN";
  const cornerChDefault = "JKLGHIABCDEFXYZWMNRSTOPQ";
  // prettier-ignore
  const moves333: string[] = [
    "U", "U'", "U2",
    "L", "L'", "L2",
    "F", "F'", "F2",
    "R", "R'", "R2",
    "B", "B'", "B2",
    "D", "D'", "D2",
    "u", "u'", "u2",
    "l", "l'", "l2",
    "f", "f'", "f2",
    "r", "r'", "r2",
    "b", "b'", "b2",
    "d", "d'", "d2",
    "M", "M'", "M2",
    "E", "E'", "E2",
    "S", "S'", "S2",
    "x", "y", "z", "x'", "y'", "z'", "x2", "y2", "z2"
];

  // prettier-ignore
  const solved333: string =
    "DEGCUGAAJ" +
    "EDCXLTQLM" +
    "BBLSFQNJY" +
    "KHIRRZZPS" +
    "HFFYBWTNP" +
    "WIXKDOOMR";
  // ULFRBD

  let cube = `x${solved333}`;

  // prettier-ignore
  const trackDict: Record<string, number[]> = {
    edge: [2, 4, 6, 8, 11, 13, 15, 17, 20, 22, 24, 26, 29, 31, 33, 35, 38, 40, 42, 44, 47, 49, 51, 53],
    corner: [1, 3, 7, 9, 10, 12, 16, 18, 19, 21, 25, 27, 28, 30, 34, 36, 37, 39, 43, 45, 46, 48, 52, 54]
};

  const trackMap: Record<string, Record<string, number>> = Object.fromEntries(
    Object.entries(trackDict).map(([key, values]) => [
      key,
      Object.fromEntries(values.map((x) => [solved333[x - 1], x])),
    ]),
  );

  function track(codeType: string, trackS1: string, a: string): string {
    return a[trackMap[codeType][trackS1]];
  }

  // This section of the code is revised from the following repository:
  // https://github.com/dwalton76/rubiks-cube-NxNxN-solver
  // MIT License
  // Copyright (c) 2019 Daniel Walton
  // prettier-ignore
  const swaps333: Record<string, number[]> = {
    "B": [0, 30, 33, 36, 4, 5, 6, 7, 8, 9, 3, 11, 12, 2, 14, 15, 1, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 54, 31, 32, 53, 34, 35, 52, 43, 40, 37, 44, 41, 38, 45, 42, 39, 46, 47, 48, 49, 50, 51, 10, 13, 16],
    "B'": [0, 16, 13, 10, 4, 5, 6, 7, 8, 9, 52, 11, 12, 53, 14, 15, 54, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 1, 31, 32, 2, 34, 35, 3, 39, 42, 45, 38, 41, 44, 37, 40, 43, 46, 47, 48, 49, 50, 51, 36, 33, 30],
    "B2": [0, 54, 53, 52, 4, 5, 6, 7, 8, 9, 36, 11, 12, 33, 14, 15, 30, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 16, 31, 32, 13, 34, 35, 10, 45, 44, 43, 42, 41, 40, 39, 38, 37, 46, 47, 48, 49, 50, 51, 3, 2, 1],
    "D": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 43, 44, 45, 19, 20, 21, 22, 23, 24, 16, 17, 18, 28, 29, 30, 31, 32, 33, 25, 26, 27, 37, 38, 39, 40, 41, 42, 34, 35, 36, 52, 49, 46, 53, 50, 47, 54, 51, 48],
    "D'": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 25, 26, 27, 19, 20, 21, 22, 23, 24, 34, 35, 36, 28, 29, 30, 31, 32, 33, 43, 44, 45, 37, 38, 39, 40, 41, 42, 16, 17, 18, 48, 51, 54, 47, 50, 53, 46, 49, 52],
    "D2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 34, 35, 36, 19, 20, 21, 22, 23, 24, 43, 44, 45, 28, 29, 30, 31, 32, 33, 16, 17, 18, 37, 38, 39, 40, 41, 42, 25, 26, 27, 54, 53, 52, 51, 50, 49, 48, 47, 46],
    "F": [0, 1, 2, 3, 4, 5, 6, 18, 15, 12, 10, 11, 46, 13, 14, 47, 16, 17, 48, 25, 22, 19, 26, 23, 20, 27, 24, 21, 7, 29, 30, 8, 32, 33, 9, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 34, 31, 28, 49, 50, 51, 52, 53, 54],
    "F'": [0, 1, 2, 3, 4, 5, 6, 28, 31, 34, 10, 11, 9, 13, 14, 8, 16, 17, 7, 21, 24, 27, 20, 23, 26, 19, 22, 25, 48, 29, 30, 47, 32, 33, 46, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 12, 15, 18, 49, 50, 51, 52, 53, 54],
    "F2": [0, 1, 2, 3, 4, 5, 6, 48, 47, 46, 10, 11, 34, 13, 14, 31, 16, 17, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 29, 30, 15, 32, 33, 12, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 9, 8, 7, 49, 50, 51, 52, 53, 54],
    "L": [0, 45, 2, 3, 42, 5, 6, 39, 8, 9, 16, 13, 10, 17, 14, 11, 18, 15, 12, 1, 20, 21, 4, 23, 24, 7, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 52, 40, 41, 49, 43, 44, 46, 19, 47, 48, 22, 50, 51, 25, 53, 54],
    "L'": [0, 19, 2, 3, 22, 5, 6, 25, 8, 9, 12, 15, 18, 11, 14, 17, 10, 13, 16, 46, 20, 21, 49, 23, 24, 52, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 7, 40, 41, 4, 43, 44, 1, 45, 47, 48, 42, 50, 51, 39, 53, 54],
    "L2": [0, 46, 2, 3, 49, 5, 6, 52, 8, 9, 18, 17, 16, 15, 14, 13, 12, 11, 10, 45, 20, 21, 42, 23, 24, 39, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 25, 40, 41, 22, 43, 44, 19, 1, 47, 48, 4, 50, 51, 7, 53, 54],
    "R": [0, 1, 2, 21, 4, 5, 24, 7, 8, 27, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 48, 22, 23, 51, 25, 26, 54, 34, 31, 28, 35, 32, 29, 36, 33, 30, 9, 38, 39, 6, 41, 42, 3, 44, 45, 46, 47, 43, 49, 50, 40, 52, 53, 37],
    "R'": [0, 1, 2, 43, 4, 5, 40, 7, 8, 37, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 22, 23, 6, 25, 26, 9, 30, 33, 36, 29, 32, 35, 28, 31, 34, 54, 38, 39, 51, 41, 42, 48, 44, 45, 46, 47, 21, 49, 50, 24, 52, 53, 27],
    "R2": [0, 1, 2, 48, 4, 5, 51, 7, 8, 54, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 43, 22, 23, 40, 25, 26, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 38, 39, 24, 41, 42, 21, 44, 45, 46, 47, 3, 49, 50, 6, 52, 53, 9],
    "U": [0, 7, 4, 1, 8, 5, 2, 9, 6, 3, 19, 20, 21, 13, 14, 15, 16, 17, 18, 28, 29, 30, 22, 23, 24, 25, 26, 27, 37, 38, 39, 31, 32, 33, 34, 35, 36, 10, 11, 12, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54],
    "U'": [0, 3, 6, 9, 2, 5, 8, 1, 4, 7, 37, 38, 39, 13, 14, 15, 16, 17, 18, 10, 11, 12, 22, 23, 24, 25, 26, 27, 19, 20, 21, 31, 32, 33, 34, 35, 36, 28, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54],
    "U2": [0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 28, 29, 30, 13, 14, 15, 16, 17, 18, 37, 38, 39, 22, 23, 24, 25, 26, 27, 10, 11, 12, 31, 32, 33, 34, 35, 36, 19, 20, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54],
    "x": [0, 19, 20, 21, 22, 23, 24, 25, 26, 27, 12, 15, 18, 11, 14, 17, 10, 13, 16, 46, 47, 48, 49, 50, 51, 52, 53, 54, 34, 31, 28, 35, 32, 29, 36, 33, 30, 9, 8, 7, 6, 5, 4, 3, 2, 1, 45, 44, 43, 42, 41, 40, 39, 38, 37],
    "x'": [0, 45, 44, 43, 42, 41, 40, 39, 38, 37, 16, 13, 10, 17, 14, 11, 18, 15, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 30, 33, 36, 29, 32, 35, 28, 31, 34, 54, 53, 52, 51, 50, 49, 48, 47, 46, 19, 20, 21, 22, 23, 24, 25, 26, 27],
    "x2": [0, 46, 47, 48, 49, 50, 51, 52, 53, 54, 18, 17, 16, 15, 14, 13, 12, 11, 10, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    "y": [0, 7, 4, 1, 8, 5, 2, 9, 6, 3, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 10, 11, 12, 13, 14, 15, 16, 17, 18, 48, 51, 54, 47, 50, 53, 46, 49, 52],
    "y'": [0, 3, 6, 9, 2, 5, 8, 1, 4, 7, 37, 38, 39, 40, 41, 42, 43, 44, 45, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 52, 49, 46, 53, 50, 47, 54, 51, 48],
    "y2": [0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 54, 53, 52, 51, 50, 49, 48, 47, 46],
    "z": [0, 16, 13, 10, 17, 14, 11, 18, 15, 12, 52, 49, 46, 53, 50, 47, 54, 51, 48, 25, 22, 19, 26, 23, 20, 27, 24, 21, 7, 4, 1, 8, 5, 2, 9, 6, 3, 39, 42, 45, 38, 41, 44, 37, 40, 43, 34, 31, 28, 35, 32, 29, 36, 33, 30],
    "z'": [0, 30, 33, 36, 29, 32, 35, 28, 31, 34, 3, 6, 9, 2, 5, 8, 1, 4, 7, 21, 24, 27, 20, 23, 26, 19, 22, 25, 48, 51, 54, 47, 50, 53, 46, 49, 52, 43, 40, 37, 44, 41, 38, 45, 42, 39, 12, 15, 18, 11, 14, 17, 10, 13, 16],
    "z2": [0, 54, 53, 52, 51, 50, 49, 48, 47, 46, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 45, 44, 43, 42, 41, 40, 39, 38, 37, 9, 8, 7, 6, 5, 4, 3, 2, 1],
    "r": [0, 1, 20, 21, 4, 23, 24, 7, 26, 27, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 47, 48, 22, 50, 51, 25, 53, 54, 34, 31, 28, 35, 32, 29, 36, 33, 30, 9, 8, 39, 6, 5, 42, 3, 2, 45, 46, 44, 43, 49, 41, 40, 52, 38, 37],
    "r'": [0, 1, 44, 43, 4, 41, 40, 7, 38, 37, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 3, 22, 5, 6, 25, 8, 9, 30, 33, 36, 29, 32, 35, 28, 31, 34, 54, 53, 39, 51, 50, 42, 48, 47, 45, 46, 20, 21, 49, 23, 24, 52, 26, 27],
    "r2": [0, 1, 47, 48, 4, 50, 51, 7, 53, 54, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 43, 22, 41, 40, 25, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 39, 24, 23, 42, 21, 20, 45, 46, 2, 3, 49, 5, 6, 52, 8, 9],
    "u": [0, 7, 4, 1, 8, 5, 2, 9, 6, 3, 19, 20, 21, 22, 23, 24, 16, 17, 18, 28, 29, 30, 31, 32, 33, 25, 26, 27, 37, 38, 39, 40, 41, 42, 34, 35, 36, 10, 11, 12, 13, 14, 15, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54],
    "u'": [0, 3, 6, 9, 2, 5, 8, 1, 4, 7, 37, 38, 39, 40, 41, 42, 16, 17, 18, 10, 11, 12, 13, 14, 15, 25, 26, 27, 19, 20, 21, 22, 23, 24, 34, 35, 36, 28, 29, 30, 31, 32, 33, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54],
    "u2": [0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 28, 29, 30, 31, 32, 33, 16, 17, 18, 37, 38, 39, 40, 41, 42, 25, 26, 27, 10, 11, 12, 13, 14, 15, 34, 35, 36, 19, 20, 21, 22, 23, 24, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54],
    "d": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 40, 41, 42, 43, 44, 45, 19, 20, 21, 13, 14, 15, 16, 17, 18, 28, 29, 30, 22, 23, 24, 25, 26, 27, 37, 38, 39, 31, 32, 33, 34, 35, 36, 52, 49, 46, 53, 50, 47, 54, 51, 48],
    "d'": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 22, 23, 24, 25, 26, 27, 19, 20, 21, 31, 32, 33, 34, 35, 36, 28, 29, 30, 40, 41, 42, 43, 44, 45, 37, 38, 39, 13, 14, 15, 16, 17, 18, 48, 51, 54, 47, 50, 53, 46, 49, 52],
    "d2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 31, 32, 33, 34, 35, 36, 19, 20, 21, 40, 41, 42, 43, 44, 45, 28, 29, 30, 13, 14, 15, 16, 17, 18, 37, 38, 39, 22, 23, 24, 25, 26, 27, 54, 53, 52, 51, 50, 49, 48, 47, 46],
    "l": [0, 45, 44, 3, 42, 41, 6, 39, 38, 9, 16, 13, 10, 17, 14, 11, 18, 15, 12, 1, 2, 21, 4, 5, 24, 7, 8, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 53, 52, 40, 50, 49, 43, 47, 46, 19, 20, 48, 22, 23, 51, 25, 26, 54],
    "l'": [0, 19, 20, 3, 22, 23, 6, 25, 26, 9, 12, 15, 18, 11, 14, 17, 10, 13, 16, 46, 47, 21, 49, 50, 24, 52, 53, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 8, 7, 40, 5, 4, 43, 2, 1, 45, 44, 48, 42, 41, 51, 39, 38, 54],
    "l2": [0, 46, 47, 3, 49, 50, 6, 52, 53, 9, 18, 17, 16, 15, 14, 13, 12, 11, 10, 45, 44, 21, 42, 41, 24, 39, 38, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 26, 25, 40, 23, 22, 43, 20, 19, 1, 2, 48, 4, 5, 51, 7, 8, 54],
    "f": [0, 1, 2, 3, 17, 14, 11, 18, 15, 12, 10, 49, 46, 13, 50, 47, 16, 51, 48, 25, 22, 19, 26, 23, 20, 27, 24, 21, 7, 4, 30, 8, 5, 33, 9, 6, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 34, 31, 28, 35, 32, 29, 52, 53, 54],
    "f'": [0, 1, 2, 3, 29, 32, 35, 28, 31, 34, 10, 6, 9, 13, 5, 8, 16, 4, 7, 21, 24, 27, 20, 23, 26, 19, 22, 25, 48, 51, 30, 47, 50, 33, 46, 49, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 12, 15, 18, 11, 14, 17, 52, 53, 54],
    "f2": [0, 1, 2, 3, 51, 50, 49, 48, 47, 46, 10, 35, 34, 13, 32, 31, 16, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 30, 15, 14, 33, 12, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 9, 8, 7, 6, 5, 4, 52, 53, 54],
    "b": [0, 30, 33, 36, 29, 32, 35, 7, 8, 9, 3, 6, 12, 2, 5, 15, 1, 4, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 51, 54, 31, 50, 53, 34, 49, 52, 43, 40, 37, 44, 41, 38, 45, 42, 39, 46, 47, 48, 11, 14, 17, 10, 13, 16],
    "b'": [0, 16, 13, 10, 17, 14, 11, 7, 8, 9, 52, 49, 12, 53, 50, 15, 54, 51, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 4, 1, 31, 5, 2, 34, 6, 3, 39, 42, 45, 38, 41, 44, 37, 40, 43, 46, 47, 48, 35, 32, 29, 36, 33, 30],
    "b2": [0, 54, 53, 52, 51, 50, 49, 7, 8, 9, 36, 35, 12, 33, 32, 15, 30, 29, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 17, 16, 31, 14, 13, 34, 11, 10, 45, 44, 43, 42, 41, 40, 39, 38, 37, 46, 47, 48, 6, 5, 4, 3, 2, 1],
    "M": [0, 1, 44, 3, 4, 41, 6, 7, 38, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 21, 22, 5, 24, 25, 8, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 53, 39, 40, 50, 42, 43, 47, 45, 46, 20, 48, 49, 23, 51, 52, 26, 54],
    "M'": [0, 1, 20, 3, 4, 23, 6, 7, 26, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 47, 21, 22, 50, 24, 25, 53, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 8, 39, 40, 5, 42, 43, 2, 45, 46, 44, 48, 49, 41, 51, 52, 38, 54],
    "M2": [0, 1, 47, 3, 4, 50, 6, 7, 53, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 44, 21, 22, 41, 24, 25, 38, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 26, 39, 40, 23, 42, 43, 20, 45, 46, 2, 48, 49, 5, 51, 52, 8, 54],
    "E": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 40, 41, 42, 16, 17, 18, 19, 20, 21, 13, 14, 15, 25, 26, 27, 28, 29, 30, 22, 23, 24, 34, 35, 36, 37, 38, 39, 31, 32, 33, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54],
    "E'": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 22, 23, 24, 16, 17, 18, 19, 20, 21, 31, 32, 33, 25, 26, 27, 28, 29, 30, 40, 41, 42, 34, 35, 36, 37, 38, 39, 13, 14, 15, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54],
    "E2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 31, 32, 33, 16, 17, 18, 19, 20, 21, 40, 41, 42, 25, 26, 27, 28, 29, 30, 13, 14, 15, 34, 35, 36, 37, 38, 39, 22, 23, 24, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54],
    "S": [0, 1, 2, 3, 17, 14, 11, 7, 8, 9, 10, 49, 12, 13, 50, 15, 16, 51, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 4, 30, 31, 5, 33, 34, 6, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 35, 32, 29, 52, 53, 54],
    "S'": [0, 1, 2, 3, 29, 32, 35, 7, 8, 9, 10, 6, 12, 13, 5, 15, 16, 4, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 51, 30, 31, 50, 33, 34, 49, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 11, 14, 17, 52, 53, 54],
    "S2": [0, 1, 2, 3, 51, 50, 49, 7, 8, 9, 10, 35, 12, 13, 32, 15, 16, 29, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 17, 30, 31, 14, 33, 34, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 6, 5, 4, 52, 53, 54]
  };

  function rotate333(step: string): void {
    cube = swaps333[step].map((index) => cube[index]).join("");
  }

  function sequenceToState(sequence: string): string {
    cube = `x${solved333}`;

    const moves = sequence.split(" ").filter((x) => x);

    // Apply the sequence to the cube
    for (const move of moves) {
      let isValid = false;
      if (moves333.includes(move)) {
        rotate333(move);
        isValid = true;
      }

      if (!isValid) {
        return `x${solved333}`;
      }
    }

    return cube;
  }

  function getRawCode(
    codeType: string,
    sequence: string,
    edgeCh: string = edgeChDefault,
    cornerCh: string = cornerChDefault,
  ): string {
    let fullChar = "";
    const state = sequenceToState(sequence);
    const stepsDict: Record<string, number> = {
      edge: 2,
      corner: 3,
    };
    const codeOrderDict: Record<string, string> = {
      edge: edgeCh,
      corner: cornerCh,
    };
    const codeOrder = codeOrderDict[codeType];
    const steps = stepsDict[codeType];

    for (let i = 0; i < 24; i += steps) {
      if (
        !Array.from({ length: steps }, (_, j) => codeOrder[i + j]).some((ch) =>
          fullChar.includes(ch),
        )
      ) {
        let partChar = codeOrder[i];
        while (
          track(codeType, partChar[partChar.length - 1], state) !== partChar[0]
        ) {
          partChar += track(codeType, partChar[partChar.length - 1], state);
        }
        if (partChar !== codeOrder[i]) {
          fullChar += partChar + codeOrder[i];
        }
      }
    }
    return fullChar;
  }

  function centerSolved(sequence: string): boolean {
    if (sequence === "") {
      return false;
    }
    for (const char of sequence) {
      if (!"RUDFBLrudfblEMSwxyz23' ".includes(char)) {
        return false;
      }
    }

    if ("1234567890' ".includes(sequence[0])) {
      return false;
    }

    const state = sequenceToState(sequence);
    return state[5] === "U" && state[23] === "F";
  }

  function getCodeAuto(
    x: string,
    edgeCh: string = edgeChDefault,
    cornerCh: string = cornerChDefault,
  ): [string, string] {
    if (!centerSolved(x)) {
      return ["", ""];
    }

    const codeJson: { edge: string; corner: string } = {
      edge: getRawCode("edge", x, edgeCh, cornerCh),
      corner: getRawCode("corner", x, edgeCh, cornerCh),
    };
    if (codeJson.edge.length === 4 && codeJson.corner.length === 0) {
      return ["edge", codeJson.edge[0] + codeJson.edge[2] + codeJson.edge[1]];
    }
    if (codeJson.edge.length === 0 && codeJson.corner.length === 4) {
      return [
        "corner",
        codeJson.corner[0] + codeJson.corner[2] + codeJson.corner[1],
      ];
    }
    if (codeJson.edge.length === 6 && codeJson.corner.length === 0) {
      // prettier-ignore
      const edgeFlips = ["ABA", "CDC", "EFE", "GHG", "IJI", "KLK", "MNM", "OPO", "QRQ", "STS", "WXW", "YZY"];
      if (
        edgeFlips.includes(codeJson.edge.substring(0, 3)) &&
        edgeFlips.includes(codeJson.edge.substring(3, 6))
      ) {
        return ["2flips", codeJson.edge[0] + codeJson.edge[3]];
      }
    }
    if (codeJson.edge.length === 0 && codeJson.corner.length === 8) {
      // prettier-ignore
      const cornerTwistsCW = ["ABCA", "DEFD", "GHIG", "JKLJ", "WMNW", "OPQO", "RSTR", "XYZX"];
      // prettier-ignore
      const cornerTwistsCCW = ["ACBA", "DFED", "GIHG", "JLKJ", "WNMW", "OQPO", "RTSR", "XZYX"];
      if (
        cornerTwistsCW.includes(codeJson.corner.substring(0, 4)) &&
        cornerTwistsCCW.includes(codeJson.corner.substring(4, 8))
      ) {
        return ["2twists", codeJson.corner[4] + codeJson.corner[0]];
      }
      if (
        cornerTwistsCCW.includes(codeJson.corner.substring(0, 4)) &&
        cornerTwistsCW.includes(codeJson.corner.substring(4, 8))
      ) {
        return ["2twists", codeJson.corner[0] + codeJson.corner[4]];
      }
    }
    if (
      codeJson.edge.length === 3 &&
      codeJson.corner.length === 3 &&
      codeJson.edge[0] === codeJson.edge[2] &&
      codeJson.corner[0] === codeJson.corner[2]
    ) {
      return [
        "parity",
        codeJson.edge[0] +
          codeJson.edge[1] +
          codeJson.corner[0] +
          codeJson.corner[1],
      ];
    }
    if (
      codeJson.edge.length === 3 &&
      codeJson.corner.length === 11 &&
      codeJson.edge[0] === codeJson.edge[2]
    ) {
      // prettier-ignore
      const cornerTwists = ["ABCA", "ACBA", "DEFD", "DFED", "GHIG", "GIHG", "JKLJ", "JLKJ", "WMNW", "WNMW", "OPQO", "OQPO", "RSTR", "RTSR", "XYZX", "XZYX"];
      if (
        cornerTwists.includes(codeJson.corner.substring(7, 11)) &&
        cornerTwists.includes(
          codeJson.corner[0] +
            codeJson.corner[2] +
            codeJson.corner[4] +
            codeJson.corner[0],
        )
      ) {
        return [
          "ltct",
          codeJson.edge[0] +
            codeJson.edge[1] +
            codeJson.corner[0] +
            codeJson.corner[5] +
            codeJson.corner[8],
        ];
      }
      if (
        cornerTwists.includes(codeJson.corner.substring(0, 4)) &&
        cornerTwists.includes(
          codeJson.corner[4] +
            codeJson.corner[6] +
            codeJson.corner[8] +
            codeJson.corner[4],
        )
      ) {
        return [
          "ltct",
          codeJson.edge[0] +
            codeJson.edge[1] +
            codeJson.corner[4] +
            codeJson.corner[9] +
            codeJson.corner[1],
        ];
      }
    }

    return ["", ""];
  }

  return {
    sequenceToState,
    getCodeAuto,
  };
})();

export default tracer;
